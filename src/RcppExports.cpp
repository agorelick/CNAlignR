// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// phaseblock
NumericVector phaseblock(NumericVector pos, NumericVector bin, double max_phaseable_distance);
RcppExport SEXP _CNalign_phaseblock(SEXP posSEXP, SEXP binSEXP, SEXP max_phaseable_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bin(binSEXP);
    Rcpp::traits::input_parameter< double >::type max_phaseable_distance(max_phaseable_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(phaseblock(pos, bin, max_phaseable_distance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CNalign_phaseblock", (DL_FUNC) &_CNalign_phaseblock, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CNalign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
